#pragma once

enum CFATYPE : std::uint32_t
{
	CFATYPE_NONE = 0,
	CFATYPE_BGGR = 1,
	CFATYPE_GRBG = 2,
	CFATYPE_GBRG = 3,
	CFATYPE_RGGB = 4,

	// A = Cyan		B = Green		C = Magenta		D = Yellow
	CFATYPE_CGMY = 0xABCD,
	CFATYPE_CGYM = 0xABDC,
	CFATYPE_CMGY = 0xACBD,
	CFATYPE_CMYG = 0xACDB,
	CFATYPE_CYMG = 0xADCB,
	CFATYPE_CYGM = 0xADBC,

	CFATYPE_GCMY = 0xBACD,
	CFATYPE_GCYM = 0xBADC,
	CFATYPE_GMCY = 0xBCAD,
	CFATYPE_GMYC = 0xBCDA,
	CFATYPE_GYCM = 0xBDAC,
	CFATYPE_GYMC = 0xBDCA,

	CFATYPE_MCGY = 0xCABD,
	CFATYPE_MCYG = 0xCADB,
	CFATYPE_MGYC = 0xCBDA,
	CFATYPE_MGCY = 0xCBAD,
	CFATYPE_MYGC = 0xCDBA,
	CFATYPE_MYCG = 0xCDAB,

	CFATYPE_YCGM = 0xDABC,
	CFATYPE_YCMG = 0xDACB,
	CFATYPE_YGMC = 0xDBCA,
	CFATYPE_YGCM = 0xDBAC,
	CFATYPE_YMCG = 0xDCAB,
	CFATYPE_YMGC = 0xDCBA,

	CFATYPE_CYMGCYGM = 0xADCBADBC,
	CFATYPE_YCGMYCMG = 0xDABCDACB,
	CFATYPE_CYGMCYMG = 0xADBCADCB,
	CFATYPE_YCMGYCGM = 0xDACBDABC,

	CFATYPE_MGYCMGCY = 0xCBDACBAD,
	CFATYPE_GMCYGMYC = 0xBCADBCDA,
	CFATYPE_MGCYMGYC = 0xCBADCBDA,
	CFATYPE_GMYCGMCY = 0xBCDABCAD,

	CFATYPE_GMCYMGCY = 0xBCADCBAD,
	CFATYPE_MGYCGMYC = 0xCBDABCDA,
	CFATYPE_MGCYGMCY = 0xCBADBCAD,
	CFATYPE_GMYCMGYC = 0xBCDACBDA,

	CFATYPE_CYMGYCMG = 0xADCBDACB,
	CFATYPE_YCGMCYGM = 0xDABCADBC,
	CFATYPE_YCMGCYMG = 0xDACBADCB,
	CFATYPE_CYGMYCGM = 0xADBCDABC
};
inline bool IsCYMGType(CFATYPE Type) { return ((Type & 0xFFFFFFF0) != 0); }
inline bool IsSimpleCYMG(CFATYPE Type) { return !(Type & 0xFFFF0000); }

typedef enum CFATRANSFORMATION
{
	CFAT_NONE = 0,
	CFAT_SUPERPIXEL = 1,
	CFAT_RAWBAYER = 2,
	CFAT_BILINEAR = 3,
	CFAT_GRADIENT = 4,
	CFAT_AHD = 5
} CFATRANSFORMATION;
